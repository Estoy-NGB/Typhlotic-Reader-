import face_recognition
import cv2
import os
from time import sleep
from imutils.object_detection import non_max_suppression
import numpy as np
import pytesseract
from picamera import PiCamera



cm_image = face_recognition.load_image_file("customers/CM.jpg")
cm_face_encoding = face_recognition.face_encodings(cm_image)[0]
bharath_image = face_recognition.load_image_file("customers/bharath.jpg")
bharath_face_encoding = face_recognition.face_encodings(bharath_image)[0]

known_face_encodings = [
    cm_face_encoding,
    bharath_face_encoding
]
known_face_names = [
    "Chandramouli",
    "Bharath"
]

cmd = 'espeak "Welcome to Blind Reader Station" 2>/dev/null'
os.system(cmd)
sleep(1)


textDetector = "frozen_east_text_detection.pb"
min_confidence = 0.5
iWidth = 128
iHeight = 128
iPadding = 0.25


def decode_predictions(scores, geometry):
    (numRows, numCols) = scores.shape[2:4]
    rects = []
    confidences = []
    for y in range(0, numRows):
        scoresData = scores[0, 0, y]
        xData0 = geometry[0, 0, y]
        xData1 = geometry[0, 1, y]
        xData2 = geometry[0, 2, y]
        xData3 = geometry[0, 3, y]
        anglesData = geometry[0, 4, y]
        for x in range(0, numCols):
            if scoresData[x] < min_confidence:
                continue

            (offsetX, offsetY) = (x * 4.0, y * 4.0)
            angle = anglesData[x]
            cos = np.cos(angle)
            sin = np.sin(angle)
            h = xData0[x] + xData2[x]
            w = xData1[x] + xData3[x]
            endX = int(offsetX + (cos * xData1[x]) + (sin * xData2[x]))
            endY = int(offsetY - (sin * xData1[x]) + (cos * xData2[x]))
            startX = int(endX - w)
            startY = int(endY - h)
            rects.append((startX, startY, endX, endY))
            confidences.append(scoresData[x])

    # return a tuple of the bounding boxes and associated confidences
    return (rects, confidences)

def capture_image():
    testImage = "images/latest.jpg"
    video_capture = cv2.VideoCapture(0)
    
    while(True):
        ret, frame = video_capture.read()
        small_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)
        rgb_small_frame = small_frame[:, :, ::-1]
        cv2.imshow("Webcam",frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            cv2.imwrite(testImage, frame)
            break
    video_capture.release()
    cv2.destroyAllWindows()
    return frame,rgb_small_frame

def get_names():
    # Initialize some variables
    face_locations = []
    face_encodings = []
    face_names = []
    while len(face_names)== 0 or name == 'Unknown': 
        process_this_frame = True
        frame,rgb_small_frame = capture_image()
        # Only process every other frame of video to save time
        if process_this_frame:
            # Find all the faces and face encodings in the current frame of video
            face_locations = face_recognition.face_locations(rgb_small_frame)
            face_encodings = face_recognition.face_encodings(rgb_small_frame, face_locations)

            face_names = []
            for face_encoding in face_encodings:
                # See if the face is a match for the known face(s)
                matches = face_recognition.compare_faces(known_face_encodings, face_encoding)
                name = "Unknown"

                # If a match was found in known_face_encodings, just use the first one.
                if True in matches:
                    first_match_index = matches.index(True)
                    name = known_face_names[first_match_index]

                face_names.append(name)

        process_this_frame = not process_this_frame
     
    return face_names

def get_text(net,layerNames):
 
    image = cv2.imread('images/latest.jpg')
    orig = image.copy()
    (origH, origW) = image.shape[:2]
    (newW, newH) = (iWidth, iHeight)
    rW = origW / float(newW)
    rH = origH / float(newH)
    image = cv2.resize(image, (newW, newH))
    (H, W) = image.shape[:2]
    blob = cv2.dnn.blobFromImage(image, 1.0, (W, H),
        (123.68, 116.78, 103.94), swapRB=True, crop=False)
    net.setInput(blob)
    (scores, geometry) = net.forward(layerNames)
    (rects, confidences) = decode_predictions(scores, geometry)
    boxes = non_max_suppression(np.array(rects), probs=confidences)
    results = []

    # loop over the bounding boxes
    for (startX, startY, endX, endY) in boxes:
        startX = int(startX * rW)
        startY = int(startY * rH)
        endX = int(endX * rW)
        endY = int(endY * rH)
        dX = int((endX - startX) * iPadding)
        dY = int((endY - startY) * iPadding)

        # apply padding to each side of the bounding box, respectively
        startX = max(0, startX - dX)
        startY = max(0, startY - dY)
        endX = min(origW, endX + (dX * 2))
        endY = min(origH, endY + (dY * 2))

        # extract the actual padded ROI
        roi = orig[startY:endY, startX:endX]

        #config = ("-l eng --oem 1 --psm 7")
        text = pytesseract.image_to_string(roi,lang='eng',config='--oem 1 --psm 7')
        results.append(((startX, startY, endX, endY), text))

    # sort the results bounding box coordinates from top to bottom
    results = sorted(results, key=lambda r:r[0][1])
    selectedText = ''
    # loop over the results
    for ((startX, startY, endX, endY), text) in results:
        print("{}\n".format(text))
        selectedText = text.upper()
        
    print(selectedText)
    return selectedText

def transaction(names):
    layerNames = [
            "feature_fusion/Conv_7/Sigmoid",
            "feature_fusion/concat_3"]

    net = cv2.dnn.readNet('frozen_east_text_detection.pb')
    # Transactions
    while True:
        cmd = 'espeak "What would you like to do? {}" 2>/dev/null'.format(names[0])
        os.system(cmd)
        capture_image()

        selectedText = get_text(net,layerNames)
        
        if (selectedText.find('BALANCE') != -1):
            cmd = 'espeak "Your Balance is 100 Rupees" 2>/dev/null'
            os.system(cmd)
            sleep(1)
        elif(selectedText.find('WITHDRAW') != -1):
            cmd = 'espeak "How much do you want to withdraw?" 2>/dev/null'
            os.system(cmd)
            sleep(1)
            capture_image()
            selectedText = get_text(net,layerNames)
            if selectedText == '':
                cmd = 'espeak "Could not get the currency" 2>/dev/null'
                os.system(cmd)
                sleep(1)
                capture_image()
                selectedText = get_text(net,layerNames)
            cmd = 'espeak "Withdrawal amount {}" 2>/dev/null'.format(selectedText)
            os.system(cmd)
            sleep(1)
            
        elif(selectedText.find('DEPOSIT') != -1):
            cmd = 'espeak "How much do you want to deposit?" 2>/dev/null'
            os.system(cmd)
            sleep(1)
 
        elif(selectedText.find('QUIT') != -1):
            break


# Main Program **************************************************    

def main():
    while(True):
        
        cmd = 'espeak "Looking for Customers" 2>/dev/null'
        os.system(cmd)
        names = get_names()
        print(names)
        cmd = 'espeak "Welcome {}" 2>/dev/null'.format(names[0])
        os.system(cmd)
        transaction(names)
        cmd = 'espeak "Thankyou for banking with us {}" 2>/dev/null'.format(names[0])
        os.system(cmd)
# 
#
if __name__ == '__main__':
    main()
    






